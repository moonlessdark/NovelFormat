from enum import Enum


class NovelPunctuationSymbol(Enum):
    """
    小说中的标签符号
    """
    period_zh: str = '。'
    period_en: str = '.'
    comma_zh: str = '，'
    comma_en: str = ','
    question_zh: str = '？'
    question_en: str = '?'
    exclamation_zh: str = '！'
    exclamation_en: str = '!'
    semicolon_zh: str = '；'
    semicolon_en: str = ';'
    double_quotation_marks_left_zh: str = '“'
    double_quotation_marks_left_en: str = '"'
    double_quotation_marks_left_tw: str = '「'
    double_quotation_marks_right_zh: str = '”'
    double_quotation_marks_right_en: str = '"'
    double_quotation_marks_right_tw: str = '」'
    ellipsis_zh: str = '......'
    ellipsis_en: str = '……'


class NovelString(Enum):
    """
    小说中会出现的字符
    """

    """
    Html特殊转义字符
    """
    html_error_str: list[str] = ["&amp;",
                                 "x5730;", "x5740;", "x53d1;", "x5e03;",
                                 "x9875;",
                                 "xff12;", "xff55;", "xff12;", "xff55;", "xff12;", "xff55;", "xff0e;", "xff43;",
                                 "xff4f;", "xff4d;", "#xff14;", "#xff26;", "#xff14;", "#xff26;", "#xff14;", "#xff26;",
                                 "#xff23;", "#xff2f;", "#xff2d;", "#xFF14;", "#xFF26;",
                                 "#xFF14;", "#xFF26;", "#xFF14;", "#xFF26;", "#xFF0E;", "#xFF23;", "#xFF2F;", "#xFF2D;",
                                 "#x65B0;", "#x627E;", "#x56DE;", "#xFF14;", "#xFF26;", "#xFF14;", "#xFF26;", "#xFF14;",
                                 "#xFF26;", "#xFF0E;", "#xFF23;", "#xFF2F;", "#xFF2D;",
                                 "###x53D1;", "#x5E03;", "##xFF12;", "#xFF55;", "#xFF12;", "#xFF55;",
                                 "##xFF12;", "#xFF55;", "#xFF43;", "#xFF4F;", "#xFF4D;",
                                 "#x6700;", "#x65b0;", "#x627e;", "#x56de;", "#x65B0;", "#x627E;", "#x56DE;",
                                 ]
    """
    小说中的广告推广,一般是推广小说的网站
    这里记录的是开头和结尾的文字，用于正则匹配中间的内容
    """
    ad_str: tuple[list[str, str]] = [("发布地址", "收藏不迷路！"),
                                     ("【发布地址", "天才只需一秒就能记住】"),
                                     ("(天才只需一秒就能记住", "com)"),
                                     ('最新找回', 'ＣＯＭ'),
                                     ('【最新发布地址', '找到回家的路!】'),
                                     ('【发布地址', 'COM】'),
                                     ('【天才一秒就记住', '以备不时之需！】'),
                                     ('【发布地址', '速记\(看其他\)】'),
                                     ('【记住收藏地址', '以备不时之需！】'),
                                     ('【发布地址', 'com】'),
                                     ('【最新地址发布页', '收藏不迷路!】'),
                                     ('【回家的路', '收藏不迷路!】'),
                                     ('【最新发布页', '收藏不迷路!】'),
                                     ('【收藏不迷路', '以备不时之需】'),
                                     ('地阯發鈽', ".com"),
                                     ('地阯发钚', ".com"),
                                     ("|最|新|网|址|找|回|", "℃○㎡"),
                                     ('发布页', '￠○㎡'),
                                     ("{手`机`看`小`", "℃-〇-㎡}"),
                                     ("(福利电影 你懂得", "打开即可播放)")
                                     ]

    """
    表示有可能正在说话的词语。不能确定是在说话之前还是之后。
    注意：该内容必须在双引号之外才是有效的
    """
    talk_str: list[str] = ['的说', '的道', "说道", '否认道'
                                                   "笑骂", "笑道", "揶揄", '调侃', '笑着说', '笑着道',
                           "怒骂", "骂道", "大吼道", "大叫", '呵斥',
                           "嘟囔", "嘀咕", '默念', "碎碎念", '唠叨',
                           "问道", '问了声',
                           '边唱', '边说', '边讲', '边问',
                           '叮嘱', '吩咐', '讨论', '交流', '讲解',
                           '七嘴八舌', '滔滔不绝', '口若悬河', '侃侃而谈', '念念有词', '振振有词', '喋喋不休',
                           '娓娓道来', '支支吾吾',
                           '我说', '解释',
                           '拍手说', '呻吟',
                           ]
    """
    词组，单词纠正
    """
    change_str: dict = {
        "壹": "一",
        "贰": "二",
        "叁": "三",
        "肆": "四",
        "伍": "五",
        "陆": "六",
        "柒": "七",
        "捌": "八",
        "玖": "九",
        "拾": "十",
        "。。。。。。": "……",
        "。。。": "……",
    }


class Template(Enum):
    # 网页垃圾字符
    error_str: list[str] = ["&amp;", "x5730;", "x5740;", "x53d1;", "x5e03;", "x9875;", "xff12;", "xff55;", "xff12;",
                            "xff55;", "xff12;", "xff55;", "xff0e;", "xff43;", "xff4f;", "xff4d;", "#x6700;", "#x65b0;",
                            "#x627e;", "#x56de;", "#xff14;", "#xff26;", "#xff14;", "#xff26;", "#xff14;", "#xff26;",
                            "#xff23;", "#xff2f;", "#xff2d;", "#x65B0;", "#x627E;", "#x56DE;", "#xFF14;", "#xFF26;",
                            "#xFF14;", "#xFF26;", "#xFF14;", "#xFF26;", "#xFF0E;", "#xFF23;", "#xFF2F;", "#xFF2D;",
                            "#x65B0;", "#x627E;", "#x56DE;", "#xFF14;", "#xFF26;", "#xFF14;", "#xFF26;", "#xFF14;",
                            "#xFF26;", "#xFF0E;", "#xFF23;", "#xFF2F;", "#xFF2D;"]

    # 换行符，如果表示结束符的双引号右侧有该数组中的字符就换行，全局模式使用
    wrap_character_by_end_double_quotes: list[str] = ["。", "！", '；']

    # 结束符，碰到这些字符就开始检测是否需要换行，单行模式使用
    wrap_character_by_line: list[str] = ["”", "。", "？", "！", '；']

    # 表示说话的词语,用于判断是否需要换行。如果表示开始的双引号左侧有该数组中的字符，那么就在前面换行
    talk_str: list[str] = ['：', ':', '的说', '的道', "说道", "嘀咕", "笑骂", "怒骂", "骂道", "碎碎念", "大吼", "大叫",
                           '默念',
                           "笑道", "嘟囔", "揶揄", "问道", '呵斥', '边唱', '边说', '边讲', '边问', '叮嘱', '吩咐',
                           '唠叨',
                           '调侃', '讨论', '交流', '吩咐', '讲解', '七嘴八舌', '滔滔不绝', '口若悬河', '侃侃而谈',
                           '念念有词',
                           '振振有词', '喋喋不休', '娓娓道来', '支支吾吾', '我说', '笑着说', '解释', '拍手说', '呻吟',
                           '否认', '说']

    # 双引号右侧的第一个字符(例如：张三说："你说干啥就干嘛？", 李四闻言被吓了一大跳。)如果有以下字符，就不换行
    talk_str_by_end_double_quotes: list[str] = ['、', '了一', '地一', '的', '得一', '，', '声', '一声闷哼', '问了声',
                                                '说着']

    # 小说中的推广广告，类似"记住最新网址XXXXXXXXXXX之类的"
    # 以下2个数组，用用于在正则表达式中，匹配符合"开头的字符+结尾的字符"的所有内容，将其置为Null
    # 英文括号 记得加上反斜杠转义一下
    ad_str: tuple[list[str, str]] = [("发布地址", "收藏不迷路！"),
                                     ("【发布地址", "天才只需一秒就能记住】"),
                                     ("(天才只需一秒就能记住", "com)"),
                                     ('最新找回', 'ＣＯＭ'),
                                     ('【最新发布地址', '找到回家的路!】'),
                                     ('【发布地址', 'COM】'),
                                     ('【天才一秒就记住', '以备不时之需！】'),
                                     ('【发布地址', '速记\(看其他\)】'),
                                     ('【记住收藏地址', '以备不时之需！】'),
                                     ('【发布地址', 'com】'),
                                     ('【最新地址发布页', '收藏不迷路!】'),
                                     ('【回家的路', '收藏不迷路!】'),
                                     ('【最新发布页', '收藏不迷路!】'),
                                     ('【收藏不迷路', '以备不时之需】'),
                                     ('地阯發鈽', ".com"),
                                     ('地阯发钚', ".com"),
                                     ("|最|新|网|址|找|回|", "℃○㎡"),
                                     ("{手`机`看`小`", "℃-〇-㎡}"),
                                     ("(福利电影 你懂得", "打开即可播放)")]
    # 词组，单词纠正
    change_str: dict = {
        "壹": "一",
        "贰": "二",
        "叁": "三",
        "肆": "四",
        "伍": "五",
        "陆": "六",
        "柒": "七",
        "捌": "八",
        "玖": "玖",
        "拾": "十",
        "。。。": "。",
        "……": "。",
        "，，": "。"
    }


if __name__ == '__main__':
    html_str = NovelString.html_error_str.value
    html_str.sort()
    print(html_str)
